import os,sys
import csv
import json
import traceback
from flask import (Blueprint,request,jsonify, current_app)
from argosdb.db import get_mongodb, log_error, next_sequence_value
bp = Blueprint('dataset', __name__, url_prefix='/dataset')


@bp.route('/detail', methods=('GET', 'POST'))
def detail():
    req_obj = request.json
    res_obj = get_doc_one(req_obj)
    return jsonify(res_obj), 200

@bp.route('/search', methods=('GET', 'POST'))
def search():
    req_obj = request.json
    res_obj = get_doc_many(req_obj)
    return jsonify(res_obj), 200


@bp.route('/pagecn', methods=('GET', 'POST'))
def pagecn():
    req_obj = request.json
    res_obj = get_doc_one(req_obj)
    return jsonify(res_obj), 200





def get_doc_one(req_obj):
    SITE_ROOT = os.path.realpath(os.path.dirname(__file__))
    json_url = os.path.join(SITE_ROOT, "conf/config.json")
    config_obj = json.load(open(json_url))

    try:
        mongo_dbh, error_obj = get_mongodb()
        if error_obj != {}:
            return error_obj
        if "coll" not in req_obj:
            return {"status":0, "error":"no collection specified"}
        if req_obj["coll"] not in config_obj["collinfo"]:
            return {"status":0, "error":"unknown collection name"}
        coll_name =  req_obj["coll"]
        prj_obj = config_obj["collinfo"][coll_name]["get_one"]["prj"]
        qf_dict = config_obj["collinfo"][coll_name]["get_one"]["queryfields"]
        and_list = []
        for f in qf_dict:
            qf_obj = qf_dict[f]
            if qf_obj["required"] == True and f not in req_obj:
                msg = "field=%s is required query field"%(f)
                return {"status":0, "error":msg}
            if f in req_obj:
                val = req_obj[f]
                val = int(val) if qf_obj["datatype"] == "int" else val
                val = float(val) if qf_obj["datatype"] == "float" else val
                if qf_obj["operator"] == "$regex":
                    and_list.append({qf_obj["path"]:{'$regex':val,'$options':'i'}})
                elif qf_obj["operator"] == "$eq":
                    and_list.append({qf_obj["path"]:{'$eq':val}})

        qry_obj = {}
        if and_list != []:
            qry_obj = {"$and":and_list}

        #return jsonify(qry_obj), 200
    
        if coll_name == "c_bco":
            coll_name += "_v-%s" % (current_app.config["DATA_VERSION"])

        res_obj = {"status":1}
        doc_list = []
        if prj_obj != {}:
            doc = mongo_dbh[coll_name].find_one(qry_obj, prj_obj)
        else:
            doc = mongo_dbh[coll_name].find_one(qry_obj)
        if "_id" in doc:
            doc.pop("_id")

        res_obj["record"] = doc
        res_obj["query"] = req_obj
    except Exception as e:
        res_obj =  log_error(traceback.format_exc())

    return res_obj


def get_doc_many(req_obj):

    SITE_ROOT = os.path.realpath(os.path.dirname(__file__))
    json_url = os.path.join(SITE_ROOT, "conf/config.json")
    config_obj = json.load(open(json_url))

    try:
        mongo_dbh, error_obj = get_mongodb()
        if error_obj != {}:
            return error_obj
        if "coll" not in req_obj:
            return {"status":0, "error":"no collection specified"}
        if req_obj["coll"] not in config_obj["collinfo"]:
            return {"status":0, "error":"unknown collection name"}

        coll_name =  req_obj["coll"]
        prj_obj = config_obj["collinfo"][coll_name]["get_many"]["prj"]
        qf_dict = config_obj["collinfo"][coll_name]["get_many"]["queryfields"]

        and_list, or_list = [], []

        for f in qf_dict:
            qf_obj = qf_dict[f]
            if qf_obj["required"] == True and f not in req_obj:
                msg = "field=%s is required query field"%(f)
                return {"status":0, "error":msg}
            if f in req_obj:
                if f == "query":
                    if prj_obj != {} and req_obj[f].strip() != "":
                        for p in prj_obj.keys():
                            or_list.append({p:{'$regex':req_obj[f],'$options':'i'}})
                else:
                    val = req_obj[f]
                    val = int(val) if qf_obj["datatype"] == "int" else val
                    val = float(val) if qf_obj["datatype"] == "float" else val
                    if qf_obj["operator"] == "$regex":
                        and_list.append({qf_obj["path"]:{'$regex':val,'$options':'i'}})
                    elif qf_obj["operator"] == "$eq":
                        and_list.append({qf_obj["path"]:{'$eq':val}})
        
        if or_list != []:
            and_list.append({ "$or":or_list})

        qry_obj = {}
        if and_list != []:
            qry_obj = {"$and":and_list}
        
        #return jsonify(qry_obj), 200
        
        if coll_name == "c_bco":
            coll_name += "_v-%s" % (current_app.config["DATA_VERSION"])

        res_obj = {"status":1, "recordlist":[]}
        doc_list = []
        if prj_obj != {}:
            doc_list = list(mongo_dbh[coll_name].find(qry_obj, prj_obj))
        else:
            doc_list = list(mongo_dbh[coll_name].find(qry_obj))
        
        for doc in doc_list:
            if coll_name.find("c_bco") != -1:
                res_obj["recordlist"].append(doc["extract"])
            else:
                res_obj["recordlist"].append(doc)
        res_obj["query"] = req_obj

    except Exception as e:
        res_obj =  log_error(traceback.format_exc())

    return res_obj



@bp.route('/history_list', methods=('GET', 'POST'))
def history_list():

    SITE_ROOT = os.path.realpath(os.path.dirname(__file__))
    json_url = os.path.join(SITE_ROOT, "conf/config.json")
    config_obj = json.load(open(json_url))

    try:
        req_obj = request.json
        mongo_dbh, error_obj = get_mongodb()

        rel_file = "%s/v-%s/releaseinfo/all_history.json" % (current_app.config["DATA_PATH"], current_app.config["DATA_VERSION"])
        rel_json = json.loads(open(rel_file, "r").read())

        seen = {}
        bcoid2filenames = {}
        for bco_id in rel_json:
            for ver in rel_json[bco_id]:
                seen[ver] = True
                if bco_id not in bcoid2filenames:
                    bcoid2filenames[bco_id] = []
                if ver in rel_json[bco_id][ver]:
                    file_name = rel_json[bco_id][ver][ver]["filename"]
                    if file_name not in bcoid2filenames[bco_id]:
                        bcoid2filenames[bco_id].append(file_name)
        ver_list = sorted(seen.keys())

        cat_dict = {}
        selected_bco_list = []
        for ver in ver_list:
            bco_collection = "c_bco_v-" + ver
            for all_doc in mongo_dbh[bco_collection].find({}):
                doc = all_doc["extract"]
                bco_id = doc["bcoid"]
                if "categories" in doc:
                    for cat_name in doc["categories"]:
                        cat_value = doc["categories"][cat_name]
                        if cat_name != "" and cat_value != "" and cat_name != "tags":
                            if cat_name not in cat_dict:
                                cat_dict[cat_name] = []
                            if cat_value not in cat_dict[cat_name]:
                                cat_dict[cat_name].append(cat_value)
                        if req_obj != {} and cat_name == req_obj["category_name"] and cat_value == req_obj["category_value"]:
                            selected_bco_list.append(bco_id)


        data_frame = []
        row = [ {"label": "File Name","type": "string"}]
        for ver in ver_list:
            row.append({"label": "ver-"+ver, "type": "string"})
        row.append({"label": "", "type": "string"})
        data_frame.append(row)
        for bco_id in rel_json:
            if selected_bco_list != [] and bco_id not in selected_bco_list:
                continue
            row = [bco_id + " (%s)" %(", ".join(bcoid2filenames[bco_id]))]
            for ver in ver_list:
                val = 0
                if ver in rel_json[bco_id]:
                    if ver in rel_json[bco_id][ver]:
                        if "recordcount" in rel_json[bco_id][ver][ver]:
                            val = rel_json[bco_id][ver][ver]["recordcount"]
                row.append(val)
            detail_link = "<a href=\"%s/history\">details</a>" % (bco_id)
            row.append(detail_link)
            data_frame.append(row)
        res_obj = {"dataframe":data_frame, "categories":cat_dict, "status":1}
    except Exception as e:
        res_obj =  log_error(traceback.format_exc())

 
    return jsonify(res_obj), 200



@bp.route('/history_detail', methods=('GET', 'POST'))
def history_detail():

    SITE_ROOT = os.path.realpath(os.path.dirname(__file__))
    json_url = os.path.join(SITE_ROOT, "conf/config.json")
    config_obj = json.load(open(json_url))

    res_obj = {}
    try:
        req_obj = request.json
        mongo_dbh, error_obj = get_mongodb()
        rel_file = "%s/v-%s/releaseinfo/all_history.json" % (current_app.config["DATA_PATH"], current_app.config["DATA_VERSION"])
        rel_json = json.loads(open(rel_file, "r").read())
        fname_list = []
        his_obj = rel_json[req_obj["bcoid"]]
        for ver in his_obj:
            file_name = his_obj[ver][ver]["filename"]
            if file_name not in fname_list:
                fname_list.append(file_name)
        res_obj["bcoid"] = req_obj["bcoid"]
        res_obj["filenamelist"] = fname_list
        res_obj["history"] = []
        for ver in sorted(his_obj, reverse=True):
            o = his_obj[ver][ver]
            id_list_one = sorted(o["additions"]) if "additions" in o else []
            id_list_two = sorted(o["deletions"]) if "deletions" in o else []
            res_obj["history"].append(
                {
                    "version":ver, 
                    "count":o["recordcount"], 
                    "additions":id_list_one, 
                    "deletions":id_list_two
            })
    except Exception as e:
        res_obj =  log_error(traceback.format_exc())

    return jsonify(res_obj), 200



